/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view.entity;

import hr.algebra.dal.GenreRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.GenreTableModel;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author ivanjerkovic
 */
public class GenrePanel extends javax.swing.JPanel {

    /**
     * Creates new form GenrePanel
     */
    public GenrePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        btnDeleteAllGenres = new javax.swing.JButton();
        btnUpdateGenre = new javax.swing.JButton();
        btnAddGenre = new javax.swing.JButton();
        tfGenre = new javax.swing.JTextField();
        lbGenreError = new javax.swing.JLabel();
        btnDeleteGenre = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbGenres = new javax.swing.JTable();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel5.setText("Genre:");

        btnDeleteAllGenres.setText("Delete All");
        btnDeleteAllGenres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllGenresActionPerformed(evt);
            }
        });

        btnUpdateGenre.setText("Update Genre");
        btnUpdateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGenreActionPerformed(evt);
            }
        });

        btnAddGenre.setText("Add Genre");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        lbGenreError.setForeground(new java.awt.Color(255, 0, 51));
        lbGenreError.setText("X");

        btnDeleteGenre.setText("Delete Genre");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        tbGenres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbGenresMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbGenresMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbGenres);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeleteAllGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(layout.createSequentialGroup()
                .addGap(275, 275, 275)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnUpdateGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateGenre)
                    .addComponent(btnAddGenre))
                .addGap(2, 2, 2)
                .addComponent(btnDeleteAllGenres)
                .addGap(7, 7, 7)
                .addComponent(btnDeleteGenre)
                .addGap(60, 60, 60)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private GenreRepository repository;
    private GenreTableModel model;

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Genre selectedGenre;


    private void btnDeleteAllGenresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllGenresActionPerformed
        if (!MessageUtils.showConfirmDialog("Confirm", "Are you sure you want to delete ALL genres?")) {
            return;
        }

        try {
            repository.deleteAllGenres();
            model.setGenres(repository.selectGenres());
            clearForm();
            MessageUtils.showInformationMessage("INFO", "All genres deleted successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            MessageUtils.showErrorMessage("ERROR", "Could not delete all genres.");
        }
    }//GEN-LAST:event_btnDeleteAllGenresActionPerformed

    private void btnUpdateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGenreActionPerformed
        if (!formValid()) {
            return;
        }

        try {
            selectedGenre.setName(tfGenre.getText().trim());

            repository = RepositoryFactory.getGenreRepository();
            repository.updateGenre(selectedGenre.getIdGenre(), selectedGenre);
            model.setGenres(repository.selectGenres());
            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateGenreActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        if (!formValid()) {
            return;
        }

        try {
            Genre genre = new Genre(
                    tfGenre.getText().trim()
            );

            repository = RepositoryFactory.getGenreRepository();
            repository.createGenre(genre);
            model.setGenres(repository.selectGenres());
            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        if (selectedGenre == null) {
            MessageUtils.showInformationMessage("INFO", "Please select");
            return;
        }

        try {
            repository.deleteGenre(selectedGenre.getIdGenre());
            model.setGenres(repository.selectGenres());
            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tbGenresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbGenresMouseClicked
        selectGenre();
    }//GEN-LAST:event_tbGenresMouseClicked

    private void tbGenresMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbGenresMouseReleased
        selectGenre();
    }//GEN-LAST:event_tbGenresMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnDeleteAllGenres;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnUpdateGenre;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JTable tbGenres;
    private javax.swing.JTextField tfGenre;
    // End of variables declaration//GEN-END:variables

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
        }
        return ok;
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfGenre
        );
        errorLabels = Arrays.asList(
                lbGenreError
        );
    }

    private void initTable() throws Exception {
        repository = RepositoryFactory.getGenreRepository();
        tbGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbGenres.setAutoCreateRowSorter(true);
        tbGenres.setRowHeight(25);
        model = new GenreTableModel(repository.selectGenres());
        tbGenres.setModel(model);
    }

    private void init() {
        try {
            initValidation();
            hideErrors();
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(GenrePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
    }

    private void selectGenre() {
        int selectedRow = tbGenres.getSelectedRow();
        int rowIndex = tbGenres.convertRowIndexToModel(selectedRow);

        int id = (int) model.getValueAt(rowIndex, 0);

        try {
            Optional<Genre> opt = repository.selectGenre(id);
            if (opt.isPresent()) {
                selectedGenre = opt.get();
                fillForm(selectedGenre);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillForm(Genre genre) {
        tfGenre.setText(genre.getName());
    }
}
