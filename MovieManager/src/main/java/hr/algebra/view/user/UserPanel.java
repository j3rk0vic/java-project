/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view.user;

import hr.algebra.dal.sql.ActorRepositorySql;
import hr.algebra.dal.sql.DirectorRepositorySql;
import hr.algebra.dal.sql.GenreRepositorySql;
import hr.algebra.dal.sql.SqlRepository;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ivanjerkovic
 */
public class UserPanel extends javax.swing.JPanel {

    /**
     * Creates new form UserPanel
     */
    public UserPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsUserActors = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsUserDirectors = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsUserGenres = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsUserMovies = new javax.swing.JList<>();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Actors");

        jLabel2.setText("Directors");

        jLabel3.setText("Genres");

        jLabel4.setText("Movies");

        jScrollPane1.setViewportView(lsUserActors);

        jScrollPane5.setViewportView(lsUserDirectors);

        jScrollPane6.setViewportView(lsUserGenres);

        lsUserMovies.setName(""); // NOI18N
        jScrollPane2.setViewportView(lsUserMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(209, 209, 209)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(123, 123, 123))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        showData();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JList<Actor> lsUserActors;
    private javax.swing.JList<Director> lsUserDirectors;
    private javax.swing.JList<Genre> lsUserGenres;
    private javax.swing.JList<Movie> lsUserMovies;
    // End of variables declaration//GEN-END:variables

    private Movie selectedMovie;
    
    private void showData() {
        try {
            SqlRepository repo = new SqlRepository();
            List<Movie> movies = repo.selectMovies();

            DefaultListModel<Movie> model = new DefaultListModel<>();
            for (Movie movie : movies) {
                model.addElement(movie);
            }

            lsUserMovies.setModel(model);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading actors: " + e.getMessage());
            e.printStackTrace();
        }
        
        
        try {
            DirectorRepositorySql repo = new DirectorRepositorySql();
            List<Director> directors = repo.selectDirectors();

            DefaultListModel<Director> model = new DefaultListModel<>();
            for (Director director : directors) {
                model.addElement(director);
            }

            lsUserDirectors.setModel(model);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading actors: " + e.getMessage());
            e.printStackTrace();
        }
        
        
        try {
            ActorRepositorySql repo = new ActorRepositorySql();
            List<Actor> actorList = repo.selectActors();

            DefaultListModel<Actor> model = new DefaultListModel<>();
            for (Actor actor : actorList) {
                model.addElement(actor);
            }

            lsUserActors.setModel(model);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading actors: " + e.getMessage());
            e.printStackTrace();
        }
        
        
        try {
            GenreRepositorySql repo = new GenreRepositorySql();
            List<Genre> genreList = repo.selectGenres();

            DefaultListModel<Genre> model = new DefaultListModel<>();
            for (Genre genre : genreList) {
                model.addElement(genre);
            }

            lsUserGenres.setModel(model);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading actors: " + e.getMessage());
            e.printStackTrace();
        }
    }

    
}